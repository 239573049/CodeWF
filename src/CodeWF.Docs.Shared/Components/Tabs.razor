@namespace CodeWF.Docs.Shared.Components
@inject I18n I18n
@implements IAsyncDisposable

<MTabs Class="default-tabs"
       Color="primary"
       Routable
       @ref="_tabs">
    <MTab Ripple="false"
          Href="https://codewf.com">
            <MBadge Color="primary"
                    Content="@Project"
                    Class="text-capitalize"
                    Value="false">
                @I18n.T("home")
            </MBadge>
    </MTab>
    <MTab Ripple="false"
          Href="https://codewf.com/tool">
        <MBadge Color="primary"
                Content="@Project"
                Class="text-capitalize"
                Value="false">
            @I18n.T("tool")
        </MBadge>
    </MTab>
    <MTab Ripple="false"
          Href="https://codewf.com/post">
        <MBadge Color="primary"
                Content="@Project"
                Class="text-capitalize"
                Value="false">
            @I18n.T("post")
        </MBadge>
    </MTab>
    <AppMenu Items="_resourcesMenu" TItem="DefaultItem" MinWidth="200">
        <ActivatorContent>
            <MButton Height="48" Text Class="m-tab" @attributes="@context.Attrs">
                @I18n.T("about") <AppChevronDown></AppChevronDown>
            </MButton>
        </ActivatorContent>
    </AppMenu>
</MTabs>

@code {

    [CascadingParameter(Name = "Culture")] public string? Culture { get; set; }

    [CascadingParameter(Name = "project")] public string? Project { get; set; }

    private MTabs? _tabs;
    private string? _prevProject;
    private string? _prevCulture;
    private List<DefaultItem> _resourcesMenu = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _prevCulture = Culture;
    }
    

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_prevProject is null || _prevProject != Project)
        {
            _prevProject = Project;
            _resourcesMenu = [new DefaultItem("about", "https://codewf.com/about")];
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_prevCulture != Culture)
        {
            _prevCulture = Culture;
            _tabs?.CallSlider();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_tabs != null)
        {
            await _tabs.DisposeAsync();
        }
    }

}