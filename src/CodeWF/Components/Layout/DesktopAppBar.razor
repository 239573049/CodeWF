<AppBar Class="hidden-sm-and-down" BarHeight="100" LogoHeight="42">
    <SectionOutlet SectionName="document" />

    <MInteractiveTriggers Class="nav-menus"
                          WithPopup
                          Left="NavMenuLeft"
                          PopupClass="menu-list"
                          TValue="string"
                          QueryName="nav-menu"
                          QueryValue="@QueryValue"
                          InteractiveValue="navMenuInteractiveValues"
                          InteractiveComponentType="typeof(NavMenu)"
                          InteractiveComponentParameters="ProductNavMenuParameters">
        <MButton Id="@($"{context}-nav-menu")" Class="mr-9 h8 emphasis2--text" Text>
            @(context switch
            {
                "tool" => "工具",
                "post" => "博客",
                "resource" => "资源",
                "about" => "关于",
                _         => context
            })
        </MButton>
    </MInteractiveTriggers>
</AppBar>

@code {

    [Parameter] public List<NavItem> ToolNavItems { get; set; } = new();

    [Parameter] public List<NavItem> PostNavItems { get; set; } = new();

    [Parameter] public List<NavItem> ResourceNavItems { get; set; } = new();

    [Parameter] public List<NavItem> AboutNavItems { get; set; } = new();

    [SupplyParameterFromQuery(Name = "nav-menu")]
    private string? QueryValue { get; set; }

    private static string[] navMenuInteractiveValues = { "tool", "post", "resource", "about" };

    private Dictionary<string, object> ProductNavMenuParameters
    {
        get
        {
            var dict = new Dictionary<string, object>();
            List<NavItem> items;
            if (QueryValue?.Equals("tool", StringComparison.OrdinalIgnoreCase) is true)
            {
                items = ToolNavItems;
            }
            else if (QueryValue?.Equals("post", StringComparison.OrdinalIgnoreCase) is true)
            {
                items = PostNavItems;
            }
            else if (QueryValue?.Equals("resource", StringComparison.OrdinalIgnoreCase) is true)
            {
                items = ResourceNavItems;
            }
            else
            {
                items = AboutNavItems;
            }
            dict[nameof(NavMenu.Items)] = items;
            return dict;
        }
    }

    private int NavMenuLeft
    {
        get
        {
            if (QueryValue?.Equals("tool", StringComparison.OrdinalIgnoreCase) is true)
            {
                return -388;
            }
            else if (QueryValue?.Equals("post", StringComparison.OrdinalIgnoreCase) is true)
            {
                return -286;
            }
            else if (QueryValue?.Equals("resource", StringComparison.OrdinalIgnoreCase) is true)
            {
                return -184;
            }
            else
            {
                return -84;
            }
        }
    }

}
