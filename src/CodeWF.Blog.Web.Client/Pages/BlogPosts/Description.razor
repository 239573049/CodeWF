@page "/post/{year}/{month}/{slug}"
@using System.Dynamic
@using CodeWF.Blog.Web.Client.IServices
@using CodeWF.Blog.Web.Client.Models.BlogPosts
@using CodeWF.Blog.Web.Client.Options
@using CodeWF.Blog.Web.Client.Shared.Components
@using Markdig
@using Microsoft.Extensions.Options

@rendermode InteractiveAuto

@inject IBlogPostService BlogPostService;
@inject IJSRuntime JsRuntime
@inject IOptions<SiteOption> Site

<PageTitle>@_currentBlogPost?.Title</PageTitle>

<h1>@_currentBlogPost?.Title</h1>

<p>
    <span>作者：@(!string.IsNullOrWhiteSpace(_currentBlogPost?.Author) ? _currentBlogPost.Author : Site.Value.Owner)</span>
    @if (_currentBlogPost?.Categories?.Count > 0)
    {
        <span>分类：</span>
        foreach (var category in _currentBlogPost.Categories)
        {
            <span>@category</span>
        }
    }
    @if (_currentBlogPost?.Tags?.Count > 0)
    {
        <span>标签：</span>
        foreach (var category in _currentBlogPost.Tags)
        {
            <span>@category</span>
        }
    }
    @if (_currentBlogPost?.Lastmod != null)
    {
        <span>最近更新：@_currentBlogPost.Lastmod?.ToString("yyyy-MM-dd HH:mm")</span>
    }
    else
    {
        <span>发布于：@_currentBlogPost?.Date?.ToString("yyyy-MM-dd HH:mm")</span>
    }
</p>

<div>
    @HtmlContent
</div>

@code {

    [Parameter] public string? Year { get; set; }

    [Parameter] public string? Month { get; set; }

    [Parameter] public string? Slug { get; set; }

    public MarkupString HtmlContent { get; private set; }

    private BlogPost? _currentBlogPost;

    protected override async Task OnInitializedAsync()
    {
        _currentBlogPost = await BlogPostService.GetBySlug(Slug);
        if (!string.IsNullOrWhiteSpace(_currentBlogPost?.Content))
        {
            HtmlContent = ConvertToMarkupString(_currentBlogPost.Content);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("Prism.highlightAll");
    }

    private static MarkupString ConvertToMarkupString(string? value)
    {
        if (string.IsNullOrWhiteSpace(value)) return new MarkupString("Empty");

        var builder = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Use<MarkdownSectionPreCodeExtension>();

        var pipeline = builder.Build();

        var html = Markdown.ToHtml(value, pipeline);

        return new MarkupString(html);
    }

}