@inject IBlogPostService BlogPostService
@inject IDistributedCacheHelper CacheHelper

@{
    const string cacheKeyForCategories = "_SharedPartial";

    async Task<BannerViewModel> GetDataFromDb()
    {
        BannerViewModel vm = new();
        vm.Banners = await BlogPostService.BlogPostBriefListByBanner(int.MaxValue);
        var top7NewBlogPost = await BlogPostService.TopNewBlogPostBriefListAsync(int.MaxValue);
        vm.TouTiao = top7NewBlogPost?.FirstOrDefault();
        vm.New2To7 = top7NewBlogPost?.Skip(1).Take(6).ToList();
        return vm;
    }

    var bannerDatas = await CacheHelper.GetOrCreateAsync(cacheKeyForCategories,
        async e => await GetDataFromDb());
    var displayCount = 4;
    var leftBlogPosts = bannerDatas?.Banners?.Take(displayCount).ToList();
    List<BlogPostBriefForFront>? rightBlogPosts = null;
    if (bannerDatas?.Banners?.Count > displayCount)
    {
        rightBlogPosts = bannerDatas.Banners.Skip(displayCount).ToList();
    }
}

@if (bannerDatas?.Banners is { Count: > 0 })
{
    <div class="wenzi whitebg box tab-num05">
        <div class="gd-box">
            <ul id="tab">
                <li class="tab-current">站长推荐</li>
            </ul>
        </div>
        <div id="tab-content">
            <section class="tab-box">
                <div class="wenzi-list">
                    <ul class="wenzi-left">
                        @if (leftBlogPosts is { Count: > 0 })
                        {
                            @foreach (var blogPost in leftBlogPosts)
                            {
                                <li>
                                    <span>
                                        @if (blogPost.LastModifyTime is not null)
                                        {
                                            @blogPost.LastModifyTime.Value.ToString("yyyy-MM-dd")
                                        }
                                        else
                                        {
                                            @blogPost.CreationTime.ToString("yyyy-MM-dd")
                                        }
                                    </span>
                                    <a target="_blank" href="@blogPost.CreationTime.ToString("/yyyy/MM")/@blogPost.Slug" title="@blogPost.Title">@blogPost.Title</a>
                                </li>
                            }
                        }
                    </ul>
                    <ul class="wenzi-right">
                        @if (rightBlogPosts is { Count: > 0 })
                        {
                            @foreach (var blogPost in rightBlogPosts)
                            {
                                <li>
                                    <span>
                                        @if (blogPost.LastModifyTime is not null)
                                        {
                                            @blogPost.LastModifyTime.Value.ToString("yyyy-MM-dd")
                                        }
                                        else
                                        {
                                            @blogPost.CreationTime.ToString("yyyy-MM-dd")
                                        }
                                    </span>
                                    <a target="_blank" href="@blogPost.CreationTime.ToString("/yyyy/MM")/@blogPost.Slug" title="@blogPost.Title">@blogPost.Title</a>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </section>
        </div>
    </div>
}